const ww_users = [
  {
    id: 1,
    name: "Nick Fury",
    email: "OneEyeOpen@shield.org",
    password: "patches",
    role: "admin",
  },
  {
    id: 2,
    name: "Tony Stark",
    email: "thegenius@starkindustries.com",
    password: "IamIronman",
    role: "developer",
  },
  {
    id: 3,
    name: "Steve Rogers",
    email: "OutOfTime@avengers.org",
    password: "Peggy1921",
    role: "user",
  },
  {
    id: 4,
    name: "Thor",
    email: "Thor@yahoo.com",
    password: "Thor",
    role: "user",
  },
  {
    id: 5,
    name: "Peter Parker",
    email: "peter.parker@imadeanemail.com",
    password: "th3NextAvenger!",
    role: "developer",
  },
];

const ww_tickets = [
  {
    id: 1,
    ticketCreatedBy: 1,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Change all 4 SHDs on tool 11",
    assigned: "Nick Fury",
    status: "In Work",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 2,
    ticketCreatedBy: 2,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Software upgrade on tool 20",
    assigned: "Peter Parker",
    status: "Under Review",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 3,
    ticketCreatedBy: 3,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Software upgrade on tool 26",
    assigned: "Tony Stark",
    status: "Complete",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 4,
    ticketCreatedBy: 2,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Error, process won't start on tool 26",
    assigned: "Peter Parker",
    status: "Paused",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 5,
    ticketCreatedBy: 4,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Heaters not heating on tool 13",
    assigned: "Peter Parker",
    status: "Under Review",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 6,
    ticketCreatedBy: 5,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Please help troubleshoot problem",
    assigned: "Tony Stark",
    status: "Rejected",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 7,
    ticketCreatedBy: 2,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Software upgrade for Tony's CTC on tool 33",
    assigned: "Tony Stark",
    status: "Complete",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 8,
    ticketCreatedBy: 4,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Stranded wafer on tool 2",
    assigned: "Tony Stark",
    status: "Paused",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 9,
    ticketCreatedBy: 1,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Replace LF Match on tool 9",
    assigned: "Not yet assigned",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 10,
    ticketCreatedBy: 1,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Remove MFC A for failure analysis on tool 4",
    assigned: "Not yet assigned",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 11,
    ticketCreatedBy: 1,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Add project lichen to tool 7",
    assigned: "Not yet assigned",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 12,
    ticketCreatedBy: 1,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Restore hazardous gases on tool 39",
    assigned: "Not yet assigned",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 13,
    ticketCreatedBy: 1,
    priority: Math.floor(Math.random() * 10) + 1,
    description: "Remove cooling plate prototype on tool 14",
    assigned: "Not yet assigned",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
];

const ww_tasks = [
  {
    id: 1,
    ticketID: 1,
    taskCreatedBy: 1,
    task: "Cool chamber, open, and clean.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 2,
    ticketID: 1,
    taskCreatedBy: 1,
    task: "Change all SHDs, gap, heat up.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 3,
    ticketID: 1,
    taskCreatedBy: 1,
    task: "Complete return to process checklist.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 4,
    ticketID: 2,
    taskCreatedBy: 2,
    task: "This task for software only.",
    status: "Under Review",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 5,
    ticketID: 3,
    taskCreatedBy: 4,
    task: "This task for software only.",
    status: "Complete",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 6,
    ticketID: 4,
    taskCreatedBy: 2,
    task: "Troubleshoot cause of error.",
    status: "Paused",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 7,
    ticketID: 5,
    taskCreatedBy: 4,
    task: "Troubleshoot cause of heating issue.",
    status: "Complete",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 8,
    ticketID: 5,
    taskCreatedBy: 4,
    task: "Once cause is identified, restore tool to nominal conditions.",
    status: "Under Review",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 9,
    ticketID: 6,
    taskCreatedBy: 5,
    task: "I can't fix it. Help!",
    status: "Rejected",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 10,
    ticketID: 7,
    taskCreatedBy: 2,
    task: "Upgrade Tony's CTC. Once done, turn back over.",
    status: "Complete",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 11,
    ticketID: 8,
    taskCreatedBy: 4,
    task: "Confirm wafer is not broken.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 12,
    ticketID: 8,
    taskCreatedBy: 4,
    task: "Once wafer confirmed not broken, return to the FOUP.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 13,
    ticketID: 8,
    taskCreatedBy: 4,
    task: "Once wafer returned, inform process to collect and inspect. Can close once they are notified.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 14,
    ticketID: 9,
    taskCreatedBy: 1,
    task: "Do not approve. Will replace LF Match. Need to add more tasks.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 15,
    ticketID: 10,
    taskCreatedBy: 1,
    task: "Removing MFC. Hold for more tasks.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 16,
    ticketID: 11,
    taskCreatedBy: 1,
    task: "Lichen may be delayed. Hold for now.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 17,
    ticketID: 12,
    taskCreatedBy: 1,
    task: "Tool 39 is not yet approved to restore gases. Once it is, approve this and restore gases.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
  {
    id: 18,
    ticketID: 13,
    taskCreatedBy: 1,
    task: "Prototype is still collecting data. Hold until this is updated.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
    completeDate: new Date(Date.now() + Math.floor(Math.random(5 * 10 ** 7) + 86400)).toISOString(),
  },
];

// id INT PRIMARY KEY,
//       ticketID INT,
//       task TEXT,
//       status VARCHAR(255),
//       dateCreated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
//       completeDate TIMESTAMPTZ,
//       FOREIGN KEY (ticketID) REFERENCES ww_tickets(id)

const ww_comments = [
  {
    id: 1,
    commentCreatedBy: 1,
    ticketID: 1,
    taskID: 1,
    comment: "Starting this.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 2,
    commentCreatedBy: 1,
    ticketID: 1,
    taskID: 1,
    comment: "Cooled chamber, opened, and cleaned.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 3,
    commentCreatedBy: 1,
    ticketID: 1,
    taskID: 2,
    comment: "Starting on SHD removal.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 4,
    commentCreatedBy: 5,
    ticketID: 2,
    taskID: 1,
    comment: "Believe this is done now, just waiting on review.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 5,
    commentCreatedBy: 2,
    ticketID: 3,
    taskID: 1,
    comment: "Working on it.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 6,
    commentCreatedBy: 2,
    ticketID: 3,
    taskID: 1,
    comment: "Easily handled. Informed Thor.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 7,
    commentCreatedBy: 2,
    ticketID: 4,
    taskID: 1,
    comment:
      "I think I figured this out, but will look at it again after I get back.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 8,
    commentCreatedBy: 2,
    ticketID: 5,
    taskID: 1,
    comment:
      "Looks like an easy fix. I switched it to be on when true. Mr. Stark will review.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 9,
    commentCreatedBy: 5,
    ticketID: 5,
    taskID: 2,
    comment: "Set to under review for now.",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 10,
    ticketID: 6,
    taskID: 9,
    task: "I can't fix it. Help!",
    status: "Rejected",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 11,
    ticketID: 7,
    taskID: 10,
    task: "Upgrade Tony's CTC. Once done, turn back over.",
    status: "Complete",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 12,
    ticketID: 8,
    taskID: 11,
    task: "Confirm wafer is not broken.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 13,
    ticketID: 8,
    taskID: 12,
    task: "Once wafer confirmed not broken, return to the FOUP.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 14,
    ticketID: 8,
    taskID: 13,
    task: "Once wafer returned, inform process to collect and inspect. Can close once they are notified.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 15,
    ticketID: 9,
    taskID: 14,
    task: "Do not approve. Will replace LF Match. Need to add more tasks.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 16,
    ticketID: 10,
    taskID: 15,
    task: "Removing MFC. Hold for more tasks.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 17,
    ticketID: 11,
    taskID: 16,
    task: "Lichen may be delayed. Hold for now.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 18,
    ticketID: 12,
    taskID: 17,
    task: "Tool 39 is not yet approved to restore gases. Once it is, approve this and restore gases.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
  {
    id: 19,
    ticketID: 13,
    taskID: 18,
    task: "Prototype is still collecting data. Hold until this is updated.",
    status: "Pending",
    dateCreated: new Date(Date.now() - Math.floor(Math.random(2 * 10 ** 7))).toISOString(),
  },
];

// id SERIAL PRIMARY KEY,
//             ticketID INT,
//             taskID INT,
//             taskCreatedBy INT,
//             comment TEXT,
//             dateCreated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
//             FOREIGN KEY (ticketID) REFERENCES ww_tickets(id),
//             FOREIGN KEY (taskID) REFERENCES ww_tasks(id)
module.exports = {
  ww_users,
  ww_tickets,
  ww_tasks,
  ww_comments,
};
